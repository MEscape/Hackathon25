name: Deploy to Server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      SSH_KEY:  ${{ secrets.SSH_KEY }}
      APP_DIR:  "/opt/safenet"
      SERVICE:  "safenet"
      HEALTH_URL: "http://127.0.0.1:8080/actuator/health"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: "maven"   # schadet Gradle nicht

      - name: Build (detect Maven/Gradle + find JAR)
        id: build
        shell: bash
        run: |
          set -euo pipefail

          echo "==> Project root:"
          ls -la

          ARTIFACT=""

          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
            ./mvnw -B -DskipTests package
            ARTIFACT=$(ls -1 target/*.jar | grep -v '\-sources\.jar' | grep -v '\-javadoc\.jar' | head -n1 || true)
          elif [ -f "pom.xml" ]; then
            echo "mvnw nicht gefunden – benutze System-Maven."
            mvn -v
            mvn -B -DskipTests package
            ARTIFACT=$(ls -1 target/*.jar | grep -v '\-sources\.jar' | grep -v '\-javadoc\.jar' | head -n1 || true)
          elif [ -f "./gradlew" ]; then
            chmod +x ./gradlew
            # Bevorzugt Spring Boot Task, sonst jar
            ./gradlew -x test bootJar || ./gradlew -x test jar
            ARTIFACT=$(ls -1 build/libs/*.jar | grep -v '\-plain\.jar' | head -n1 || true)
          elif [ -f "build.gradle" ] || ls build.gradle.kts >/dev/null 2>&1; then
            echo "::error::Kein gradlew im Repo. Füge den Gradle-Wrapper hinzu oder liefere mvnw/maven."
            exit 1
          else
            echo "::error::Kein pom.xml oder build.gradle gefunden – weiß nicht, wie ich bauen soll."
            exit 1
          fi

          if [ -z "${ARTIFACT:-}" ] || [ ! -f "$ARTIFACT" ]; then
            echo "::error::Kein JAR erzeugt (target/ oder build/libs/ leer)."
            exit 1
          fi

          echo "artifact=$ARTIFACT" >> "$GITHUB_OUTPUT"
          echo "Gefundenes Artefakt: $ARTIFACT"

      - name: Ensure target dir on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key:      ${{ env.SSH_KEY }}
          port:     ${{ env.SSH_PORT }}
          script: |
            set -e
            sudo mkdir -p "$APP_DIR"
            # Optional: Besitzer umsetzen, falls Service unter user 'safenet' läuft
            # sudo chown -R safenet:safenet "$APP_DIR"

      - name: Copy JAR
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key:      ${{ env.SSH_KEY }}
          port:     ${{ env.SSH_PORT }}
          source:   ${{ steps.build.outputs.artifact }}
          target:   ${{ env.APP_DIR }}/app.jar

      - name: Restart service + health check
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key:      ${{ env.SSH_KEY }}
          port:     ${{ env.SSH_PORT }}
          script: |
            set -e
            sudo systemctl restart "$SERVICE"
            sleep 2
            if command -v curl >/dev/null 2>&1; then
              for i in $(seq 1 30); do
                curl -fsS "$HEALTH_URL" && exit 0
                sleep 1
              done
              echo "Health check failed"
              sudo systemctl status "$SERVICE" --no-pager -n 100 || true
              journalctl -u "$SERVICE" -n 200 --no-pager || true
              exit 1
            fi
