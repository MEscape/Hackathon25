name: Deploy backend to Server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SSH_HOST:    ${{ secrets.SSH_HOST }}
      SSH_USER:    ${{ secrets.SSH_USER }}
      SSH_PORT:    ${{ secrets.SSH_PORT }}
      SSH_KEY:     ${{ secrets.SSH_KEY }}

      # Wir deployen nach /opt/safenet (muss dem SSH-User gehören oder beschreibbar sein)
      APP_DIR:     /opt/safenet

      # Health der App (Port/Path ggf. anpassen)
      HEALTH_URL:  http://127.0.0.1:8080/actuator/health

      # Java (nur für den Build auf dem Runner)
      JAVA_HOME:   /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/21.0.8-9/x64
      JAVA_HOME_21_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/21.0.8-9/x64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java (build)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Build backend (clean install, robust artifact detect)
        id: build
        shell: bash
        run: |
          set -euo pipefail
          cd backend

          MVN="./mvnw"; [ -x "$MVN" ] || MVN="mvn"
          [ "$MVN" = "./mvnw" ] && chmod +x ./mvnw

          # Clean install ohne Tests, SNAPSHOTs aktualisieren
          "$MVN" -B -U -ntp -DskipTests clean install

          # finalName + packaging deterministisch aus Maven lesen
          FINAL_NAME=$("$MVN" -q -DforceStdout help:evaluate -Dexpression=project.build.finalName)
          PACKAGING=$("$MVN" -q -DforceStdout help:evaluate -Dexpression=project.packaging || echo "jar")
          CANDIDATE="target/${FINAL_NAME}.${PACKAGING}"

          # Fallback: neuestes brauchbares Jar finden
          if [ ! -f "$CANDIDATE" ]; then
            CANDIDATE=$(find target -maxdepth 1 -type f -name "*.jar" \
              ! -name "*-sources.jar" ! -name "*-javadoc.jar" ! -name "original-*.jar" \
              -printf "%T@ %p\n" | sort -nr | awk 'NR==1{print $2}' || true)
          fi

          if [ -z "${CANDIDATE:-}" ] || [ ! -f "$CANDIDATE" ]; then
            echo "::error::Kein JAR gefunden nach clean install."
            ls -al target || true
            exit 1
          fi

          echo "artifact=backend/$CANDIDATE" >> "$GITHUB_OUTPUT"
          echo "Gefundenes Artefakt: backend/$CANDIDATE"

      - name: Ensure dirs (no sudo; /opt/safenet muss beschreibbar sein)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key:      ${{ env.SSH_KEY }}
          port:     ${{ env.SSH_PORT }}
          envs:     APP_DIR
          script: |
            set -euo pipefail
            echo "Ensuring APP_DIR as $(whoami): $APP_DIR"
            mkdir -p "$APP_DIR" "$APP_DIR/logs"
            # Fail-fast, falls nicht beschreibbar:
            test -w "$APP_DIR" || (echo "ERROR: $APP_DIR ist nicht beschreibbar für $(whoami)"; exit 1)
            mkdir -p "$HOME/.config/systemd/user"
            ls -ld "$APP_DIR" "$HOME/.config/systemd/user"

      - name: Upload JAR (flat into APP_DIR)
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key:      ${{ env.SSH_KEY }}
          port:     ${{ env.SSH_PORT }}
          source:   ${{ steps.build.outputs.artifact }}   # backend/target/<file>.jar
          target:   ${{ env.APP_DIR }}                    # /opt/safenet
          strip_components: 2

      - name: Install/Update user service & restart via systemd --user
        uses: appleboy/ssh-action@v1.2.0
        env:
          APP_NAME: safenet
          JAR_PATH: ${{ steps.build.outputs.artifact }}
          # Passe diese Optionen an deine Umgebung an:
          JAVA_OPTS: "-Xms256m -Xmx512m"
          SPRING_OPTS: "--spring.profiles.active=production --server.port=8080"
          HEALTH_URL: ${{ env.HEALTH_URL }}
        with:
          host:     ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key:      ${{ env.SSH_KEY }}
          port:     ${{ env.SSH_PORT }}
          envs:     APP_DIR,APP_NAME,JAR_PATH,JAVA_OPTS,SPRING_OPTS,HEALTH_URL
          script: |
            set -euo pipefail
            jar_name=$(basename "$JAR_PATH")

            # Jar konsistent benennen
            if [ ! -f "$APP_DIR/$jar_name" ]; then
              echo "ERROR: $APP_DIR/$jar_name nicht gefunden"
              ls -al "$APP_DIR" || true
              exit 1
            fi
            mv -f "$APP_DIR/$jar_name" "$APP_DIR/app.jar"
            chmod 0644 "$APP_DIR/app.jar"

            UNIT="$HOME/.config/systemd/user/${APP_NAME}.service"

            # User-Service-Unit schreiben/aktualisieren (WorkingDirectory = /opt/safenet)
            cat > "$UNIT" <<EOF
            [Unit]
            Description=SafeNet Backend (user)
            After=network.target

            [Service]
            Type=simple
            WorkingDirectory=/opt/safenet
            ExecStart=/usr/bin/java ${JAVA_OPTS} -jar /opt/safenet/app.jar ${SPRING_OPTS}
            Restart=always
            RestartSec=2

            [Install]
            WantedBy=default.target
            EOF

            echo "Unit written to $UNIT"
            systemctl --user daemon-reload
            systemctl --user enable "${APP_NAME}.service" || true
            systemctl --user restart "${APP_NAME}.service"

            # Healthcheck (max 60s)
            for i in $(seq 1 60); do
              if command -v curl >/dev/null 2>&1 && curl -fsS "$HEALTH_URL" >/dev/null 2>&1; then
                echo "✅ Health OK"
                exit 0
              fi
              if ! systemctl --user is-active --quiet "${APP_NAME}.service"; then
                echo "❌ Service not active. Logs:"
                journalctl --user -u "${APP_NAME}.service" -n 200 --no-pager || true
                exit 1
              fi
              sleep 1
            done

            echo "❌ Health check failed after 60s"
            systemctl --user status "${APP_NAME}.service" --no-pager || true
            journalctl --user -u "${APP_NAME}.service" -n 200 --no-pager || true
            exit 1
